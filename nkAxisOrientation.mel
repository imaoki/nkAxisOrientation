/*! © 2023 imaoki | MIT License | https://github.com/imaoki */
// -----------------------------------------------------------------------------
// 一般
// -----------------------------------------------------------------------------
/*-
@returns <string>
*/
proc string getCurrentContext() {
  string $currentCtx = `currentCtx`;
  switch ($currentCtx) {
    case "moveSuperContext": return "Move";
    case "RotateSuperContext": return "Rotate";
    case "scaleSuperContext": return "Scale";
  }
  return "";
}

// -----------------------------------------------------------------------------
// UIコントロール関連
// -----------------------------------------------------------------------------
/*-
@returns <string>
*/
proc string getCustomObject() {
  return `textField -q -tx
      "nkAxisOrientationWindow|container|customObject|customObjectField"`;
}
/*-
@returns <>
*/
proc setCustomObject() {
  string $selection[] = `ls -sl -tr`;
  if (`size $selection` == 1 && `objExists $selection[0]`) {
    textField -e -tx $selection[0]
        "nkAxisOrientationWindow|container|customObject|customObjectField";
  }
}
/*-
@returns <>
*/
proc updateCustomOrientAxes() {
  string $customObject = getCustomObject();
  if (`objExists $customObject`) {
    switch (getCurrentContext()) {
      case "Move": manipMoveContext -e -m 6 -oo $customObject "Move"; break;
      case "Rotate": manipRotateContext -e -m 3 -oo $customObject "Rotate"; break;
      case "Scale": manipScaleContext -e -m 6 -oo $customObject "Scale"; break;
      default: break;
    }
  }
}
/*-
@returns <>
*/
proc setToSelection() {
  setCustomObject();
  updateCustomOrientAxes();
}
/*-
@param $axis <int>
@param $field <string>
@returns <>
*/
proc orientAxesChanged(int $axis, string $field) {
  float $value = `floatField -q -v $field`;
  switch (getCurrentContext()) {
    case "Move":
      string $mContext = "Move";
      float $moveAxes[] = `manipMoveContext -q -oa $mContext`;
      $moveAxes[$axis] = deg_to_rad($value);
      manipMoveContext -e -m 6
          -oa $moveAxes[0] $moveAxes[1] $moveAxes[2] $mContext;
      break;
    case "Rotate":
      string $rContext = "Rotate";
      float $rotateAxes[] = `manipRotateContext -q -oa $rContext`;
      $rotateAxes[$axis] = deg_to_rad($value);
      manipRotateContext -e -m 3
          -oa $rotateAxes[0] $rotateAxes[1] $rotateAxes[2] $rContext;
      break;
    case "Scale":
      string $sContext = "Scale";
      float $scaleAxes[] = `manipScaleContext -q -oa $sContext`;
      $scaleAxes[$axis] = deg_to_rad($value);
      manipScaleContext -e -m 6
          -oa $scaleAxes[0] $scaleAxes[1] $scaleAxes[2] $sContext;
      break;
    default: break;
  }
}
/*-
@returns <>
*/
proc updateControl() {
  string $container = "nkAxisOrientationWindow|container";
  string $axisField = "nkAxisOrientationWindow|container|axis|axisField";
  string $orientFieldX = "nkAxisOrientationWindow|container|orient|orientFieldX";
  string $orientFieldY = "nkAxisOrientationWindow|container|orient|orientFieldY";
  string $orientFieldZ = "nkAxisOrientationWindow|container|orient|orientFieldZ";
  string $axisLabel = "";
  float $orientAxes[] = {0.0, 0.0, 0.0};
  switch (getCurrentContext()) {
    case "Move":
      string $mContext = "Move";
      int $moveMode = `manipMoveContext -q -m $mContext`;
      switch ($moveMode) {
        case 0: $axisLabel = uiRes("m_manipMoveProperties.kObject"); break;
        case 1: $axisLabel = uiRes("m_manipMoveProperties.kLocal"); break;
        case 2: $axisLabel = uiRes("m_manipMoveProperties.kWorld"); break;
        case 3: $axisLabel = uiRes("m_manipMoveProperties.kNormal"); break;
        case 4: $axisLabel = uiRes("m_manipMoveProperties.kAlongRotationAxis"); break;
        case 5: $axisLabel = uiRes("m_manipMoveProperties.kAlongLiveObjectAxis"); break;
        case 6: $axisLabel = uiRes("m_manipMoveProperties.kCustomAxisOrientation"); break;
        case 9: case 10: $axisLabel = uiRes("m_manipMoveProperties.kAutoAlign"); break;
        default: break;
      }
      $orientAxes = `manipMoveContext -q -oa $mContext`;
      break;
    case "Rotate":
      string $rContext = "Rotate";
      int $rotateMode = `manipRotateContext -q -m $rContext`;
      switch ($rotateMode) {
        case 0: $axisLabel = uiRes("m_manipMoveProperties.kObject"); break;
        case 1: $axisLabel = uiRes("m_manipMoveProperties.kWorld"); break;
        case 2: $axisLabel = uiRes("m_manipRotateProperties.kGimbal"); break;
        case 3: $axisLabel = uiRes("m_manipMoveProperties.kCustomAxisOrientation"); break;
        case 9: case 10: $axisLabel = uiRes("m_manipMoveProperties.kAutoAlign"); break;
        default: break;
      }
      $orientAxes = `manipRotateContext -q -oa $rContext`;
      break;
    case "Scale":
      string $sContext = "Scale";
      int $scaleMode = `manipScaleContext -q -m $sContext`;
      switch ($scaleMode) {
        case 0: $axisLabel = uiRes("m_manipMoveProperties.kObject"); break;
        case 1: $axisLabel = uiRes("m_manipMoveProperties.kLocal"); break;
        case 2: $axisLabel = uiRes("m_manipMoveProperties.kWorld"); break;
        case 3: $axisLabel = uiRes("m_manipMoveProperties.kNormal"); break;
        case 4: $axisLabel = uiRes("m_manipMoveProperties.kAlongRotationAxis"); break;
        case 5: $axisLabel = uiRes("m_manipMoveProperties.kAlongLiveObjectAxis"); break;
        case 6: $axisLabel = uiRes("m_manipMoveProperties.kCustomAxisOrientation"); break;
        case 9: case 10: $axisLabel = uiRes("m_manipMoveProperties.kAutoAlign"); break;
        default: break;
      }
      $orientAxes = `manipScaleContext -q -oa $sContext`;
      break;
    default: break;
  }
  setParent $container;
  textField -e -tx $axisLabel $axisField;
  floatField -e -v (rad_to_deg($orientAxes[0])) $orientFieldX;
  floatField -e -v (rad_to_deg($orientAxes[1])) $orientFieldY;
  floatField -e -v (rad_to_deg($orientAxes[2])) $orientFieldZ;
}

// -----------------------------------------------------------------------------
// メニュー関連
// -----------------------------------------------------------------------------
/*-
@param $menu <string>
@returns <>
*/
proc buildMoveOrientMenu(string $menu) {
  menu -e -dai $menu;
  menuItem -l "Set to Selection"
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miSelection\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToObject"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miObject\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToComponent"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miComponent\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToVertex"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miVertex\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToEdge"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miEdge\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToFace"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miFace\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveResetOri"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miReset\");";
}
/*-
@param $menu <string>
@returns <>
*/
proc buildRotateOrientMenu(string $menu) {
  menu -e -dai $menu;
  menuItem -l "Set to Selection"
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miSelection\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToObject"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miObject\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToComponent"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miComponent\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToVertex"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miVertex\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToEdge"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miEdge\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToFace"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miFace\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveResetOri"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miReset\");";
}
/*-
@param $menu <string>
@returns <>
*/
proc buildScaleOrientMenu(string $menu) {
  menu -e -dai $menu;
  menuItem -l "Set to Selection"
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miSelection\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToObject"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miObject\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToComponent"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miComponent\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToVertex"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miVertex\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToEdge"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miEdge\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveSetOriToFace"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miFace\");";
  menuItem -l (uiRes("m_manipMoveProperties.kMoveResetOri"))
      -p $menu -c "nkAxisOrientationInvokeEvent(\"c\", \"miReset\");";
}
/*-
@param $menu <string>
@returns <>
*/
proc buildOrientMenu(string $menu) {
  switch (getCurrentContext()) {
    case "Move": buildMoveOrientMenu($menu); break;
    case "Rotate": buildRotateOrientMenu($menu); break;
    case "Scale": buildScaleOrientMenu($menu); break;
    default: break;
  }
}
/*-
@param $mode <int>
@returns <>
*/
proc setOrient(int $mode) {
  global int $nkAxisOrientationOrientLast = 4;
  if ($mode == -1) $mode = $nkAxisOrientationOrientLast;
  else if ($mode != 0) $nkAxisOrientationOrientLast = $mode;
  switch ($mode) {
    case 9: setToSelection(); break;
    default:
      switch (getCurrentContext()) {
        case "Move": manipMoveOrient($mode); break;
        case "Rotate": manipRotateOrient($mode); break;
        case "Scale": manipScaleOrient($mode); break;
        default: break;
      }
      break;
  }
}
/*-
@param $menu <string>
@returns <>
*/
proc buildMoveAxisMenu(string $menu) {
  menu -e -dai $menu;
  menuItem -l (uiRes("m_manipMoveProperties.kObject"))
      -p $menu -c "manipMoveContext -e -m 0 \"Move\"";
  menuItem -l (uiRes("m_manipMoveProperties.kWorld"))
      -p $menu -c "manipMoveContext -e -m 2 \"Move\"";
  menuItem -l (uiRes("m_manipMoveProperties.kAutoAlign"))
      -p $menu -c "manipMoveContext -e -m 10 \"Move\"";
  menuItem -l (uiRes("m_manipMoveProperties.kLocal"))
      -p $menu -c "manipMoveContext -e -m 1 \"Move\"";
  menuItem -l (uiRes("m_manipMoveProperties.kNormal"))
      -p $menu -c "manipMoveContext -e -m 3 \"Move\"";
  menuItem -l (uiRes("m_manipMoveProperties.kAlongRotationAxis"))
      -p $menu -c "manipMoveContext -e -m 4 \"Move\"";
  menuItem -l (uiRes("m_manipMoveProperties.kAlongLiveObjectAxis"))
      -p $menu -c "manipMoveContext -e -m 5 \"Move\"";
  menuItem -l (uiRes("m_manipMoveProperties.kCustomAxisOrientation"))
      -p $menu -c "manipMoveContext -e -m 6 \"Move\"";
}
/*-
@param $menu <string>
@returns <>
*/
proc buildRotateAxisMenu(string $menu) {
  menu -e -dai $menu;
  menuItem -l (uiRes("m_manipMoveProperties.kObject"))
      -p $menu -c "manipRotateContext -e -m 0 \"Rotate\"";
  menuItem -l (uiRes("m_manipMoveProperties.kWorld"))
      -p $menu -c "manipRotateContext -e -m 1 \"Rotate\"";
  menuItem -l (uiRes("m_manipMoveProperties.kAutoAlign"))
      -p $menu -c "manipRotateContext -e -m 10 \"Rotate\"";
  menuItem -l (uiRes("m_manipRotateProperties.kGimbal"))
      -p $menu -c "manipRotateContext -e -m 2 \"Rotate\"";
  menuItem -l (uiRes("m_manipMoveProperties.kCustomAxisOrientation"))
      -p $menu -c "manipRotateContext -e -m 3 \"Rotate\"";
}
/*-
@param $menu <string>
@returns <>
*/
proc buildScaleAxisMenu(string $menu) {
  menu -e -dai $menu;
  menuItem -l (uiRes("m_manipMoveProperties.kObject"))
      -p $menu -c "manipScaleContext -e -m 0 \"Scale\"";
  menuItem -l (uiRes("m_manipMoveProperties.kWorld"))
      -p $menu -c "manipScaleContext -e -m 2 \"Scale\"";
  menuItem -l (uiRes("m_manipMoveProperties.kAutoAlign"))
      -p $menu -c "manipScaleContext -e -m 10 \"Scale\"";
  menuItem -l (uiRes("m_manipMoveProperties.kLocal"))
      -p $menu -c "manipScaleContext -e -m 1 \"Scale\"";
  menuItem -l (uiRes("m_manipMoveProperties.kNormal"))
      -p $menu -c "manipScaleContext -e -m 3 \"Scale\"";
  menuItem -l (uiRes("m_manipMoveProperties.kAlongRotationAxis"))
      -p $menu -c "manipScaleContext -e -m 4 \"Scale\"";
  menuItem -l (uiRes("m_manipMoveProperties.kAlongLiveObjectAxis"))
      -p $menu -c "manipScaleContext -e -m 5 \"Scale\"";
  menuItem -l (uiRes("m_manipMoveProperties.kCustomAxisOrientation"))
      -p $menu -c "manipScaleContext -e -m 6 \"Scale\"";
}
/*-
@param $menu <string>
@returns <>
*/
proc buildAxisMenu(string $menu) {
  switch (getCurrentContext()) {
    case "Move": buildMoveAxisMenu($menu); break;
    case "Rotate": buildRotateAxisMenu($menu); break;
    case "Scale": buildScaleAxisMenu($menu); break;
    default: break;
  }
}
/*-
@returns <>
*/
proc setLastAxis() {
  switch (getCurrentContext()) {
    case "Move":
      string $mContext = "Move";
      manipMoveContext -e -m `manipMoveContext -q -lm $mContext` $mContext;
      break;
    case "Rotate":
      string $rContext = "Rotate";
      manipRotateContext -e -m `manipRotateContext -q -lm $rContext` $rContext;
      break;
    case "Scale":
      string $sContext = "Scale";
      manipScaleContext -e -m `manipScaleContext -q -lm $sContext` $sContext;
      break;
    default: break;
  }
}

// -----------------------------------------------------------------------------
// UI定義
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc buildMainWindow() {
  if (`window -ex nkAxisOrientationWindow` == true) {
    deleteUI nkAxisOrientationWindow;
  }
  window -t ("nkAxisOrientation " + (nkAxisOrientationVersion()))
      -mxb false
      -mnb false
      -s false
      nkAxisOrientationWindow;

  string $menuIcon = "popupMenuIcon.png";
  string $refreshIcon = "refresh.png";

  string $container = `columnLayout container`;
    string $axis = `rowLayout -nc 2 -cw2 20 190 axis`;
      string $axisButton = `iconTextButton
          // -bgc 0.5 0.0 0.0
          -i $menuIcon
          -w 20 -h 26
          axisButton`;
        string $axisMenu = `popupMenu
            -b 1
            -p $axisButton
            -pmc ("nkAxisOrientationInvokeEvent(\"pmc\", \"axisMenu\");")
            axisMenu`;
        string $axisMenuLast = `popupMenu
            -b 2
            -p $axisButton
            -pmc ("nkAxisOrientationInvokeEvent(\"pmc\", \"axisMenuLast\");")
            axisMenuLast`;
      string $axisField = `textField
          -ed false
          -width 190
          -height 26
          -ann (uiRes("m_manipMoveProperties.kCustomAxisOrientationAnn"))
          axisField`;
      setParent ..;

    string $orientFieldAnn = uiRes("m_manipMoveProperties.kCustomAxisOrientFieldsAnn");
    string $orient = `rowLayout -nc 4 -cw4 20 62 62 62 orient`;
      string $orientButton = `iconTextButton
          // -bgc 0.0 0.5 0.0
          -i $menuIcon
          -w 20 -h 26
          orientButton`;
        string $orientMenu = `popupMenu
            -b 1
            -p $orientButton
            -pmc ("nkAxisOrientationInvokeEvent(\"pmc\", \"orientMenu\");")
            orientMenu`;
        string $orientMenuLast = `popupMenu
            -b 2
            -p $orientButton
            -pmc ("nkAxisOrientationInvokeEvent(\"pmc\", \"orientMenuLast\");")
            orientMenuLast`;
      string $orientFieldX = `floatField -w 62 -ann $orientFieldAnn
          -cc "nkAxisOrientationInvokeEvent(\"cc\", \"orientFieldX\");"
          orientFieldX`;
      string $orientFieldY = `floatField -w 62 -ann $orientFieldAnn
          -cc "nkAxisOrientationInvokeEvent(\"cc\", \"orientFieldY\");"
          orientFieldY`;
      string $orientFieldZ = `floatField -w 62 -ann $orientFieldAnn
          -cc "nkAxisOrientationInvokeEvent(\"cc\", \"orientFieldZ\");"
          orientFieldZ`;
      setParent ..;

    string $customObject = `rowLayout -nc 2 -cw2 20 190 customObject`;
      string $updateOrientButton = `iconTextButton
          // -bgc 0.0 0.0 0.5
          -i $refreshIcon
          -w 20 -h 20
          -ann "Update the custom axis orientation"
          -c "nkAxisOrientationInvokeEvent(\"c\", \"updateOrientButton\");"
          updateOrientButton`;
      string $customObjectField = `textField
          -width 190
          -height 26
          -ann "Enter a custom object"
          -aie true
          -ec "nkAxisOrientationInvokeEvent(\"ec\", \"customObjectField\");"
          customObjectField`;
      setParent ..;

  // print("// " + $container + "\n");
  // print("// " + $axis + "\n");
  // print("// " + $axisButton + "\n");
  // print("// " + $axisMenuLast + "\n");
  // print("// " + $axisMenu + "\n");
  // print("// " + $axisField + "\n");
  // print("// " + $orient + "\n");
  // print("// " + $orientButton + "\n");
  // print("// " + $orientMenu + "\n");
  // print("// " + $orientMenuLast + "\n");
  // print("// " + $orientFieldX + "\n");
  // print("// " + $orientFieldY + "\n");
  // print("// " + $orientFieldZ + "\n");
  // print("// " + $customObject + "\n");
  // print("// " + $updateOrientButton + "\n");
  // print("// " + $customObjectField + "\n");

  setFocus nkAxisOrientationWindow;
  showWindow nkAxisOrientationWindow;
}

// -----------------------------------------------------------------------------
// 初期化
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
proc registerScriptJob() {
  nkAxisOrientationToolChanged();
  nkAxisOrientationToolSettingsChanged();
  int $toolChangedId = `scriptJob
      -e "ToolChanged" "nkAxisOrientationToolChanged"
      -p nkAxisOrientationWindow`;
  int $toolSettingsChangedId = `scriptJob
      -e "ToolSettingsChanged" "nkAxisOrientationToolSettingsChanged"
      -p nkAxisOrientationWindow`;
  print(`format -s $toolChangedId "// nkAxisOrientation-ToolChanged:^1s\n"`);
  print(`format -s $toolSettingsChangedId "// nkAxisOrientation-ToolSettingsChanged:^1s\n"`);
}
/*-
@returns <>
*/
proc initialize() {
  buildMainWindow();
  registerScriptJob();
}

// -----------------------------------------------------------------------------
// グローバル
// -----------------------------------------------------------------------------
/*-
@returns <>
*/
global proc nkAxisOrientationToolChanged() {
  updateControl();
}
/*-
@returns <>
*/
global proc nkAxisOrientationToolSettingsChanged() {
  updateControl();
}
/*-
@param $event <string>
@param $control <string>
@returns <>
*/
global proc nkAxisOrientationInvokeEvent(string $event, string $control) {
  switch ($event) {
    case "c":
      switch ($control) {
        case "miSelection": setOrient(9); break;
        case "miObject": setOrient(5); break;
        case "miComponent": setOrient(4); break;
        case "miVertex": setOrient(1); break;
        case "miEdge": setOrient(2); break;
        case "miFace": setOrient(3); break;
        case "miReset": setOrient(0); break;
        case "updateOrientButton": updateCustomOrientAxes(); break;
        default: break;
      }
      break;
    case "cc":
      switch ($control) {
        case "orientFieldX":
          orientAxesChanged(0, "nkAxisOrientationWindow|container|orient|orientFieldX");
          break;
        case "orientFieldY":
          orientAxesChanged(1, "nkAxisOrientationWindow|container|orient|orientFieldY");
          break;
        case "orientFieldZ":
          orientAxesChanged(2, "nkAxisOrientationWindow|container|orient|orientFieldZ");
          break;
        default: break;
      }
      break;
    case "ec":
      switch ($control) {
        case "customObjectField": updateCustomOrientAxes(); break;
        default: break;
      }
      break;
    case "pmc":
      switch ($control) {
        case "axisMenu":
          buildAxisMenu("nkAxisOrientationWindow|container|axis|axisButton|axisMenu");
          break;
        case "axisMenuLast": setLastAxis(); break;
        case "orientMenu":
          buildOrientMenu("nkAxisOrientationWindow|container|orient|orientButton|orientMenu");
          break;
        case "orientMenuLast": setOrient(-1); break;
        default: break;
      }
      break;
    default: break;
  }
}
/*-
@returns <string>
*/
global proc string nkAxisOrientationVersion() {
  return "1.3.4";
}
/*-
@returns <>
*/
global proc nkAxisOrientation() {
  initialize();
}

/*
eval ("source \"" + `getenv "MAYA_APP_DIR"` + "/library/nkAxisOrientation/nkAxisOrientation.mel\"");
nkAxisOrientation;
*/
